var calculator=new Vue({el:"#calculator",data:{principal:1e3,frequency:12,contribution:100,yearsToGrow:10,interestRate:7,totalPrincipal:"",totalReturn:"",futureBalance:""},methods:{getResults:function(){let t,e,a,n,r=this.principal,l=this.interestRate/100,s=this.frequency,u=this.yearsToGrow,o=this.contribution,c=r+o*u,h=r,m=0,d=[],g=[],f=[],p=5;for(year=(new Date).getFullYear(),i=0;i<s*u;i++)a=(h*=1+l/s)+(m=(m+o)*(1+l/s)),e=o*(i+1)+r,t=Math.round(a-e),d.push(e),g.push(t),(n=i+1+(year-2e3)).toString(),n="'"+n,f.push(n);if(d.unshift(r),g.unshift(0),f.unshift(year),12==s&&(d=d.filter((t,e)=>e%12==0),g=g.filter((t,e)=>e%12==0)),d.length>21?p=10:d.length<6&&(p=1),this.drawChart(d,g,f,p),this.futureBalance=h+m,t=this.futureBalance-c,this.futureBalance>999999999){const t=[""," billion"," trillion"];let e=0;this.futureBalance/=999999999,e++,this.futureBalance=this.futureBalance.toPrecision(3),this.futureBalance+=t[e]}this.futureBalance=this.futureBalance.toLocaleString(void 0,{minimumFractionDigits:0,maximumFractionDigits:0})},drawChart:function(t,e,i,a){function n(){Highcharts.chart("chart-container-CIcalc",{chart:{type:"column",styledMode:!0,spacingBottom:0,spacingRight:20,spacingLeft:20,animation:!1},title:{text:null},series:[{name:"Return",data:e},{name:"Investment",data:t}],plotOptions:{column:{stacking:"normal"},series:{groupPadding:.1}},legend:{align:"left",symbolRadius:0,verticalAlign:"top",x:-18,itemMarginTop:-10},xAxis:{labels:{style:{whiteSpace:"nowrap"}},categories:i,tickLength:5,tickInterval:a},yAxis:{title:!1,labels:{overflow:"allow",formatter:function(){return"$"+Highcharts.numberFormat(this.value,0,".",",")}},tickAmount:5},credits:{enabled:!1},tooltip:{shadow:!1,padding:10,shared:!0,valuePrefix:"$"}})}Highcharts.setOptions({lang:{thousandsSep:",",numericSymbols:[null,"M","G","T","P","E"]}}),"complete"===document.readyState||"interactive"===document.readyState?n():document.addEventListener("DOMContentLoaded",n)}},mounted:function(){this.getResults()}});function limitNumber(){this.value.length>this.maxLength&&(this.value=this.value.slice(0,this.maxLength),type="number",maxlength="2")}
//# sourceMappingURL=data:application/json;charset=utf8;base64,
